// How to test:
// java -cp build/classes/main -Djava.library.path=. Calculator

/*
** For patscc
*/
//
GCC = "gcc"
//
OSName = System.getProperty("os.name")
//
JAVA_HOME = System.getenv('JAVA_HOME')
//
PATSHOME = System.getenv('PATSHOME')
PATSHOMERELOC = System.getenv('PATSHOMERELOC')
//
PATSCC = "${PATSHOME}/bin/patscc"
PATSOPT = "${PATSHOME}/bin/patsopt"
PATSCCOMP = "${GCC} -D_XOPEN_SOURCE"
//
INCLUDE = "-I${PATSHOME} -I${PATSHOME}/ccomp/runtime"
JNIincl = "-I${JAVA_HOME}/include"
if (OSName.startsWith("Windows")) {  //yes, even if win64
  JNIincl += " -I${JAVA_HOME}/include/win32 -D__int64=int64_t"
} else if (OSName.startsWith("Linux")) {
  JNIincl += " -I${JAVA_HOME}/include/linux"
}
//

/* ****** ****** */

apply plugin: 'java'

apply plugin: 'eclipse' // Provides tasks for creating an Eclipse project
apply plugin: 'idea' // '' for creating an IntelliJ project
// Note: should run e.g. 'gradle idea' or 'gradle eclipse' before importing

/* ****** ****** */

task \
Calculator_controller_dats_o \
(
  type: MyExternTask
) {
  inputs.file file("Calculator_controller.dats")
  outputs.file file("Calculator_controller_dats.o")
  mycmdln = 
  "${PATSCC} -verbose -atsccomp ${PATSCCOMP} -D_GNU_SOURCE -DATS_MEMALLOC_LIBC -fPIC " +
  "${INCLUDE} -IIATS ${PATSHOMERELOC}/contrib " +
  "${JNIincl} -c Calculator_controller.dats "
  //Could do this for JNI interface located elsewhere
  //-DATS JNI_targetloc=${PATSHOMERELOC}/contrib/JNI
} // end of [Calculator_controller_dats_o]

/* ****** ****** */

task \
libCalculator_dats_so \
(
  type: MyExternTask
) {
  inputs.file file("Calculator_controller_dats.o")
  outputs.file file("libCalculator_dats.so")
  mycmdln = "${GCC} -D_XOPEN_SOURCE -shared -o libCalculator_dats.so " +
          "-Wl,-soname,libCalculator_dats.so Calculator_controller_dats.o -ldl "
//          "-L${PATSHOME}/ccomp/atslib/lib " +
//          "-L${PATSHOME}/ccomp/atslib/lib64 -latslib"
} // end of [libCalculator_dats_so]

/* ****** ****** */

Calculator_controller_dats_o.dependsOn build
libCalculator_dats_so.dependsOn Calculator_controller_dats_o

/* ****** ****** */

task buildall \
{
  dependsOn libCalculator_dats_so
}

/* ****** ****** */

class \
MyExternTask
extends DefaultTask
{
//
def mycmdln
//
def OSName
def SHELL = ''
//
@TaskAction
def myrun()
{
  project.exec
  {
    OSName = System.getProperty("os.name")
    //
    if (OSName.startsWith("Windows")) {
      // For now need to use Cygwin
      // Probably should use `cygpath` in the future for lower chance of breaking.
      SHELL = "C:\\cygwin64\\bin\\bash"
      mycmdln = "${SHELL} -l -c 'cd \"${project.projectDir}\"; ${mycmdln}'"
    }

    environment.each{k, v -> println "${k}: ${v}"} // For testing only
    commandLine = mycmdln.split().toList()

  }
}
//
} // end of [MyExternTask]

/* ****** ****** */

clean{
  FileTree tree = fileTree(dir: '.')
  tree.include('*_dats.c')
  tree.include('*.o')
  tree.include('*.so')
  tree.each {File file ->
    delete file
  }

}

task cleanall {
  // these seem to report UP-TO-DATE, even though
  // files are not removed.
  dependsOn clean
  dependsOn cleanIdea
  dependsOn cleanIdeaWorkspace
  dependsOn cleanEclipse
}

/* ****** ****** */

/* end of [build.gradle] */
